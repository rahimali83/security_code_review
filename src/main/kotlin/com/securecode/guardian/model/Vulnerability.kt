package com.securecode.guardian.model

import com.fasterxml.jackson.annotation.JsonProperty
import java.security.MessageDigest

/**
 * Represents a detected vulnerability
 */
data class Vulnerability(
    @JsonProperty("id") val id: String = generateId(),
    @JsonProperty("ruleId") val ruleId: String,
    @JsonProperty("ruleName") val ruleName: String,
    @JsonProperty("severity") val severity: Severity,
    @JsonProperty("category") val category: RuleCategory,
    @JsonProperty("description") val description: String,
    @JsonProperty("filePath") val filePath: String,
    @JsonProperty("lineNumber") val lineNumber: Int,
    @JsonProperty("columnNumber") val columnNumber: Int = 0,
    @JsonProperty("codeSnippet") val codeSnippet: String,
    @JsonProperty("compliance") val compliance: List<ComplianceTag> = emptyList(),
    @JsonProperty("quickFix") val quickFix: QuickFix? = null,
    @JsonProperty("status") var status: VulnerabilityStatus = VulnerabilityStatus.NEW,
    @JsonProperty("firstDetected") val firstDetected: Long = System.currentTimeMillis(),
    @JsonProperty("lastDetected") var lastDetected: Long = System.currentTimeMillis(),
    @JsonProperty("fingerprint") val fingerprint: String = generateFingerprint(
        ruleId, filePath, lineNumber, codeSnippet
    )
) {
    companion object {
        private fun generateId(): String {
            return "VULN-${System.currentTimeMillis()}-${(1000..9999).random()}"
        }

        /**
         * Generate a unique fingerprint for vulnerability tracking
         * This helps identify the same vulnerability across scans
         */
        fun generateFingerprint(ruleId: String, filePath: String, lineNumber: Int, codeSnippet: String): String {
            val content = "$ruleId:$filePath:$lineNumber:${codeSnippet.trim()}"
            val md = MessageDigest.getInstance("SHA-256")
            val hash = md.digest(content.toByteArray())
            return hash.joinToString("") { "%02x".format(it) }.take(16)
        }
    }
}

enum class VulnerabilityStatus {
    @JsonProperty("new") NEW,
    @JsonProperty("persistent") PERSISTENT,
    @JsonProperty("closed") CLOSED,
    @JsonProperty("fixed") FIXED,
    @JsonProperty("ignored") IGNORED
}

/**
 * Summary statistics for vulnerabilities
 */
data class VulnerabilitySummary(
    @JsonProperty("total") val total: Int,
    @JsonProperty("new") val new: Int,
    @JsonProperty("persistent") val persistent: Int,
    @JsonProperty("closed") val closed: Int,
    @JsonProperty("bySeverity") val bySeverity: Map<Severity, Int>,
    @JsonProperty("byCategory") val byCategory: Map<RuleCategory, Int>,
    @JsonProperty("byStatus") val byStatus: Map<VulnerabilityStatus, Int>
)
